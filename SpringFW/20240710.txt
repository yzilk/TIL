★template parsing【よくあるエラー】
→上のほうに行番号があるのでわかる！

★FW＆RD
フォワード:/はブラウザが知らない間に内部的に行われている
リダイレクト:/はブラウザがやれといわれてやること
リダイレクトは2重送信を防ぐ

★JavaBeans(入れ物クラス)
①Formクラス　HTMLのformタグ内の入力受け取り
パブリックなゲッターセッター持ってる
名前をname属性と同じにしておく

②EntityクラスDBのテーブルと1対1ある
エンティティにおいてはthを使用しない
データベースから取得、あるいは格納するデーターの入れ物として使う(保存が行われてる)


③Beanクラス<セッションの保存>
コントローラからビューにデータを渡すための用途で使用する
シリアライザブル＝＝ディスクに退避できる

form、bean が前！Entityが後ろ！！

★リポジトリはクラッド処理を担ってもらうもの

　
★セッションIDが見えているとあかん
セッションIDの管理！↓
＠autowired 記載するとDIする（明示的に）
たくさん仮引数で書かなければならないときに上で一気にやっておくみたいな
HTTPセッション＝セッションスコープ


★ORMはハイバネートを使用しました


★@entyty+@tableアノテーションは必須
@Entity
クラスをエンティティにする！！

@Table
エンティティとDBテーブルの名前が違う場合は
@tabelアノテーションオプションに(name="名前")の指定が必要

★以下アノテーションはクラスの中に書いていく
@Id
主キーですよ！というキー
主キーに対応するフィールドのアノテーション

@column
主キーじゃない列ですよ~のキー

@GeneratedValue　自動採番するの？しないの？①自動採番種類を指定
@sequenceGenerator　（oracle限定）自動採番するの？しないの？②作ったシーケンスの名前入れて指定
この二つのGVのgeneratorとSGのnameは任意で決定可能だが合わせ


★よくあるエラー
①tamplate might not exist or might not be accessible
ファイル作り忘れとかHTML,ファイル名違うとか
②sequeceGeneratorの「allocationSize = 1」つけ忘れ


★th:each= "item: ${items}"
Javaの拡張for文のよう名書き方が可能？
th:eachはそれが含まれているものとその以下子要素分データの分繰り返される？？

★リポジトリでは対象のクラスを<クラス名,主キー>に入れる（）
シンプルJPAリポジトリというちゃんとしたクラスの実態（実装クラス）が動いテル

★ハイバネートではリフレクションという技術を使いメソッド名から
フィールド名とASCとか条件を切り出してぶん回せる

★HTTP表示の正しいやり方
Beanクラスに変換して使う
BeanクラスではimplementsSerializableをしっかり付けとく
（ロードバランサーでぶっ壊れる）

★主キーを指定して探してくときに使う！
getReferenceById(id)

★Conrtaining %あ%
StartingWithあ%  
EndingWith%あ

★Saveメソッド
主キーの値がnullかnullではないかで
挙動が変わる
新規登録になるか
更新になるか
