
★タイムリーフ
<thblock><>のタグを隠すことができる（中身は消えない）

復習★フィルター
発動するとき

・コンポーネントアノテーションを入れないとメッセージが出てこない
・コンポーネント敢えて付けないパターン→設定クラスは順番設定を（数字）でやる
復習★thmyleaf
リンク式ーコンテキスト名を含むパス名

選択変数式　th　objechでフォームを短縮できる

thから始まるやつ＝＝拡張属性

emls シンタックスチェックしてくれる

拡張属性の値として、タグのth何とかの値として使用する
またはthブロック、があるが優先度低め

式はEL式を使用（覚えなくてよし）

フラグメント式以外の4つ

th ifで判定や比較ができる
checded,selected で判定ができる＝＝判定するとチェックされた状態
あるいは選択された状態で初期状態で選ばれた状態になる

th:locale（ロケールと呼ぶ）
＃で始まる
出すべきエラーの一覧エラーメッセージを展開することができる

detaildedErros()の種類と
hasErrorsの種類2種類を使用する

うちｌnioiteha
#detesとか日付出したいとき

#strings
#arraysとかよく使用する

オブジェクト名。フィールド名と指定した場合はフィールドに対応するgttter setterを呼び出して値を取得する
（作るの忘れない）

${#メソッド名みたいなの（引数ある場合も）}
書き方間違えやすいので注意

・選択変数式タイムリーフの3つ目の式
th:object
$
beanの名前出すときとかに使用する

・リンク式　@{}
href とactionとかで使用
@{} コンテキストパスが変わるが追従させるためにもしっかりと使用を

・リンクの生成
生成（）を使うとかより文字列連結のほうが便利
（覚えなくてよし）

・{名前}
注意：パスバリアブルを付ける、仮引数を名前を同じにする

object 
text
value (入っている値が展開されます)
field（name,id,valueを含む）
href
errors　バインディングリザルトにエラーがあれば展開されて出てくる
checked　チェックボックスとかラジオとかで条件
selected　都道府県ドロップダウンで条件
each　javaの拡張for分みたいな
each
if(elseifがない→条件長い場合はswitch分を使用)
unless
switch
case

★th:each="item:${itemslist}" th:object"${item}"
前後のitem$付ける付けないを注意する！

★ステータス変数
省略？できるがst:でちゃんと記述しよう
countをとりあえず使うときにググる
（宣言しない例もあるが覚えよう）

★map
javaでできなかったmapの繰り返し出力ができる！

★switch 
ブレイクが内包されているため
走ると1行しか展開されない！！！
