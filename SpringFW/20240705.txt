★HTTPステータスコード
200OK 404 notFound

★何やったと言われたらハイバーネート（正しくはJPA）やりましたと言えばおｋ
Web フレームワークSpring Web MVC」、
ビューテンプレート「Thymeleaf」＝＝タイムリーフ
データベースアクセス「Hibernate、JPA」
ログ出力に「Apache Log4j」

★考え方、ドメイン駆動設計（少し廃ってきている）
(Domain Driven Design：DDD)

★IoC コンテナ機能
DI：newをやってくれる便利機能
もうオブジェクトは自分で作らない？？
どっちのクラスが動いても動くように=>依存性の注入（意味としては排除）

★＠：アノテーション
@overlideみたいなやつ
これから出てくるやつは覚える！！！！

★MVC==モデル、ビュー、コントローラー　
モデル(HTML)
ビュー（HTML?）
コントローラー(Java)
javaでやってたsystemMain :Contoroller

★ビルドツール
Mavenメイヴェン
mavenサイトに行ってojdbcと検索、
書いてある記述をPOM？にコピーして貼り付けるとビルドする

★javaデザインパターン
びるだー、しんぐるとん、かさーど？

★ビーンズ：いれもの？
最初に飛ぶのはコントローラー
モデルでやりたい仕事、処理をやって
出来上がったらビューに埋め込んでく（やるのはコントローラー）

★ORM==データベース？
名に使った？と言われたら、ハイバネート
データベース操作するクラスをDAOダオ
entity,DAOをリポジトリという

★DI
newしていない？
コントローラー＝＝DIコンテナ
コントローラーはDIの仕組みを使って
NEWせずモデル（リポジトリ、サービス、ジャバビーンズ）を使用する
@Autowired：コントローラーもSPRINGフレームワークによってDIされる

★AOP
チョッカイを書ける仕組み
～をやったら読んでね→ログ出力できる（フック、フィルター）
横断的==aspect指向で使用できる
対象プログラム（コントローラー）に変更を加えずに使うことができる

★Besans
クラス郡　From,Beanm,Entityがあるお

★アノテーション各種
@Controllerコントローラーにする
メソッドの呼び方付けてあげる
@RequestMapping(path = "お名前")

場所変えた場合
フォルダー名/testとかにする（先頭に/書かない！！AWSで動かなくなる）
