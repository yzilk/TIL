★メソッド名は何でもいい　？？
リターンはあってないとダメ！retur-n ？？
htlmはタイムリーフのリンク式？？

★画面遷移　Thymeleafの式
<a th:href="@{/after}">リンク</a>　リンク式
URLのドキュメントルートがいらない　楽に記述
＄変数式　modelオブジェクト内の同名の変数の参照

★書き換えてもらうには
th:が必要！！　<a タグのところ

★フォワードしてる==return文で"index"をつかってHTMLに遷移してる
内部的に処理を引き継ぐこと！
webブラウザが自発的に

★コントローラーのreturn文の書き方
1.いつものHTML
return "index"; index.htmlへ遷移（フォーワード）
htmlへ絶対飛ぶ

2.指定したパスへフォワード（別メソッド）
return "forward:/after" 
おんなじフォワードだがパスへ（リクエストマッピングへ）飛ぶ
Controllerの別メソッドに処理を飛ばすことができる。
※ブラウザのURLは変わらない

3.指定したURLへリダイレクト（別メソッド、外のサイト）
return "redirect:/";
return "redirect:http://www.yahoo.co.jp/";
※ブラウザのURLが変わる
(ブラウザがアクセスし直している) 

★開発のネットワーク
リクエストヘッダー
リクエストレスポンスは2回走っている
302が返ってきたらブラウザが自分で勝手にアクセス、ロケーションにアクセスしている
→開発ツールレスポンスヘッダーを見るとわかります
(ちな)/て書くと絶対パスで帰ってくる
ロケーション指定するときは/消してhttpから記述を！

★空入力と０入力の区別をつけたい
integer で区別をつけることが可能！
integerだと空入力のときにNULLが返ってくる（intだと0）
区別が必要ないときはintを使用しよう

★やり方①仮引数でもらう　数が少ないときに使う
型変換してくれる
コントローラ内のメソッドの因数にパラメータと名前を同じにすると
→パラメータの値を取得利用することができる

★ゲットとポストとは
指定しないとGetになっちゃうのでPOSTをして使用
アンカータグはポストにできずGETになってしまう（リンクは絶対にゲットリクエストになる）
ポストならURLが出ない！（パスワードを隠したいときとか）

★リクエストマッピングの補完使おう
と思ったらメソッド先に書いてもヨシ

★ゲットもポストも反応しちゃう
@requsestMapping("/login")→昔の書き方だとどっちも反応します

★GetMappingゲット専用ログイン
@getMapping("/login")でゲットのやつを簡単に作れます。

★HTMLで{}のやつが出てきてたらTh抜けてるから打とう

★デバックの時便利な機能
ソースメニューのtoString生成をし
ToStringメソッドを使用すると
本来はハッシュコード出るところを値のsysOutに簡単に変えることができる

★ビュー、コントローラー以外はモデル！！
java,Beansはモデル
