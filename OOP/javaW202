:多態性
親クラス型の配列を作ると親クラスのオブジェクトを入れることができるだけでなく
子クラスオブジェクトをいれることができる


＊シグネチャ＝メソッド名・引数の型・個数・順番の組み合わせ
（メソッド名以外はオーバーロードできる環境と被る）
オーバライド（上書き乗っ取り）
サブクラスから上書きできる機能

配列length フィールド　　：参照型だけどクラスじゃないからメソッド持てない
文字列 length()メソッド　：クラスだから
arrayLisst size()メソッド

＊とりあえず子クラス（スマホ）をNEWすると継承元である
親のスーパーの（電話）のコンストラクタ（なければデフォルトコンストラクタ（最初のところ））
を参照してからメインに戻ってくる

＊変数隠し
親と子で同じ名前のフィールドを定義すると
親クラスにアクセスできなくなるので注意

＊注意
引数があるコンストラクタを作るとデフォルトコンストラクタが
消えるのでエラーになりやすい（とりあえずデフォルトコンストラクタ引数なしを書いておけばいいんじゃね）


＊ファイナル使用方法①
ファイナルを付けると継承できなくなります
メソッドに着けるとオーバーライドを禁止できる、ストリングクラスは継承できない！！


*ファイナル使用方法②
変数に着けると定数となる
何にも変更しないで使ってください！という意味
MATHクラスとかで使ってる
STATIC FINALでオブジェクト作らないでファイナル、すなわち定数で使うことができるものとか、、、
