*ウィルスへの対策において大切だが知らなかったこと
ワームとかなんか感染したら
ネットから切断する⇒電源を切りメモリの初期化

*リテラルとエスケープシークエンス知らなかった（資格に出てきやすい！）
リテラルの概念、エスケープシークエンスは他で
使用する表記を表示させることができるような仕組み

*変数名＝識別子、新たな発見があった
名前を付けるサイトがあるのは新たな発見であった。
使えるし、そういう時短テクのようなものはとても大切だと感じる

*クラスの名前とメソッドで使う名前はリンクをしているので注意が必要
BufferdReader 名前　= と
= 名前.readLine()はリンクしてる！

＊感覚と違うインクリメント演算子は覚えにくい
前置インクリメント演算子と後置インクリメント演算子の評価値に入るタイミングが
感覚と異なり覚えにくい

＊異なる型でサイズが違うときはどうする
キャスト演算子の使用を感覚的にできるようにしておく
また異なる型同士での演算結果は方が大きいほうになる

＊配列の初期化した際の配列の出力が認識と異なりイメージしにくい
intとか基本型などとは違う、参照型変数のため起こる
基本型は直接リンゴが入っているイメージだが、参照型はリンゴの箱にリンゴがある住所が入っている
そのため値の更新があった際には参照時に更新された値が出力されることになる
基本はスタック領域、参照はヒープ領域に値が保存される

＊配列変数を作る２ステップに混乱
int[] height = new int[4]
⇔変数height にint型の値を４つまで保存できる配列の情報を代入する

＊昨日に引き続き重要なJavaの参照型
文字型  参照するときはメモリアドレスではなくハッシュコード（変数名.hashCash()）
配列変数  参照するときは変数名だけ出力　
クラス型
参照するときはメモリアドレスではなくハッシュコード（変数名.hashCash()）

＊バッファーリーダー入れ子になってて分かりにくい！！ 
①標準入力(System.in)「キーボード」からの、1文字入力(InputStreamReader)を生成
InputStreamReader inReader =  new InputStreamReader(System.in); 
②1文字入力(InputStreamReader)を使って、Enterキーまでの入力(BufferedReader)を生成
BufferedReader reader = new BufferedReader(inReader);
③Enterキーまでの入力(BufferedReader)のreadLine()を使って、1行入力
String name = reader.readLine();

＊特にわかりにくい配列要素数はこれ！
配列の要素数　＝　length feeld
ほかのものと混ざりやすいので注意すること！！

＊変数の宣言及び使用に関してはスコープに注意する（使用できる範囲）
if文を抜けるとスコープから抜けるので他では変数を使えない！
==if文の外で宣言をすると使える

＊SWITCH文を使用して効率的に処理を行いましょう！！
①１つの変数を判定するか
②一致しているかどうかを判定するか

＊条件演算子を覚えよう（~の時は~を代入する）
(条件)?一個目の答え:２個目の答え

＊忘れたころの関係演算子==とかif文の中のやつ条件を書くためのやつ

＊参照型変数の使用には変数.equals()を使用しましょう

＊if文のネストはifの入れ子のこと

＊Breakは一番内側の繰り返しを脱出する！！

＊拡張FOR文が頭に入ってこない！
拡張FOR文はとりあえず全部取り出したいみたいなときに使用
int[] nums ={}
だったら
for(:)
→for(:nums)右にそのまま
→for(int:nums)取り出すタイプを入れる
→for(int values:nums)そんでvaluesで出力

＊メソッドの仮引数の個数は可変長にできる！！！！！
ピリオド３個で可変長引数にできる！！→(int a, int...b)
一種類のみ可変長にできる


